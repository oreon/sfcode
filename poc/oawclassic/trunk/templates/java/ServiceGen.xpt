«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»

«EXTENSION java::NamingConventions»
«EXTENSION java::Associations»

«REM» This artifact generates service layer interfaces and implementations.  «ENDREM»
«DEFINE GenerateService FOR Entity»
	
	«EXPAND GenerateServiceInterface»
	
	«EXPAND GenerateServiceImpl»

«ENDDEFINE»	

«DEFINE GenerateServiceImpl FOR Entity»

	«FILE packagePath()+"/service/impl/"+NameS+"ServiceImpl.java"»  

	package «packageName()».service.impl;
	
	import «packageName()».«NameS»;
	import «packageName()».service.«NameS»Service;
	import «packageName()».dao.«NameS»Dao;
	import java.util.List;
	import «packageName()».service.«NameS»Service;
	import org.springframework.transaction.annotation.Transactional;


	@Transactional
	public class «NameS»ServiceImpl implements «NameS»Service{
	
		private «NameS»Dao «asInstanceVar()»Dao;
	
			public void set«NameS»Dao(«NameS»Dao «asInstanceVar()»Dao) {
				this.«asInstanceVar()»Dao = «asInstanceVar()»Dao;
			}
			
			//// Delegate all crud operations to the Dao ////
			
			public «NameS» save(«NameS» «asInstanceVar()») {
				«Unique.isEmpty?"":"checkUniqueConstraints("+asInstanceVar() +");"»
				return «asInstanceVar()»Dao.save(«asInstanceVar()»);
			}
			
			«IF !Unique.isEmpty»
			
			/** Before saving a record we need to ensure that no unique constraints
			 * will be violated. 
			 * @param customer
			 */
			private void checkUniqueConstraints(«NameS» «asInstanceVar()») {
			«NameS»
			«FOREACH Unique AS e»
				 existing«NameS» = «asInstanceVar()»Dao.findBy«e.NameS.toFirstUpper()»
					(«asInstanceVar()».«e.getContainerGetter()»get«e.NameS.toFirstUpper()»());
				ensureUnique(«asInstanceVar()», existing«NameS», "Entity.exists.with«e.NameS.toFirstUpper()»");
			«ENDFOREACH»
			
			}
			
			private void ensureUnique(«NameS» «asInstanceVar()», «NameS» existing«NameS», String exceptionId){
				if (existing«NameS» == null)
					return; //no customer exists with the given email - no need to check unique constraint violation
				
				if («asInstanceVar()».getId() == null) { // for a new entity
						throw new RuntimeException(exceptionId);
				}else{//for updating an existing entiy
					if(existing«NameS».getId() != «asInstanceVar()».getId())
						throw new RuntimeException(exceptionId);
				}
			
			}
			
			«ENDIF»
		
			public void delete(«NameS» «asInstanceVar()») {
				«asInstanceVar()»Dao.delete(«asInstanceVar()»);
			}			
			
			public «NameS» load(Long id) {
				return «asInstanceVar()»Dao.load(id);
			}
			
		    public List<«NameS»> loadAll() {
		    	return «asInstanceVar()»Dao.loadAll();
		    }
		    
		   «EXPAND FinderDeclaration(this) FOREACH Findable »
			
			
			public List<«NameS»> searchByExample(«NameS» «asInstanceVar()») {
				return «asInstanceVar()»Dao.searchByExample(«asInstanceVar()»);
			}
		
			/*
			public List query(String queryString, Object... params) {
				return basicDAO.query(queryString, params);
			}*/
	
	}
	
	«ENDFILE»	
	
«ENDDEFINE»

«DEFINE FinderDeclaration(AbstractEntity entity) FOR Column»
	public
		« isUnique? entity.NameS : "List<" + entity.NameS + ">" »
			findBy«NameS.toFirstUpper()»(«Type.NameS» «NameS»){
			return «entity.asInstanceVar()»Dao.findBy«NameS.toFirstUpper()»(«NameS»);
		}
«ENDDEFINE»


«DEFINE GenerateServiceInterface FOR Entity»

	«FILE packagePath() + "/service/" + NameS + "Service.java"» 
	
	package «packageName()».service;
	
	import «packageName()».«NameS»;
	import «packageName()».dao.«NameS»Dao;
	
	public interface «NameS»Service extends  «NameS»Dao  {
		
			
	}		
	
	«ENDFILE»	
«ENDDEFINE»
	