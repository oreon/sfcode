«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::util::stdlib::counter»

«IMPORT java»
«EXTENSION java::NamingConventions»


«DEFINE GenerateInitialData FOR Model»

«FILE "../../test/java/initialsetup" + "/InitialDataSetup.java"»
	
package initialsetup;

import org.witchcraft.model.support.springbeanhelpers.BeanHelper;

«EXPAND GenImports FOREACH getEntities()»


/** 
 * @author jsingh
 *
 */
public class InitialDataSetup {

	public static void main(String args[]){
		
		«FOREACH getEntities() AS e-»
			«EXPAND genBeanLookup FOR e»
			«e.NameS.toFirstLower()»TestDataFactory.persistAll();
		«ENDFOREACH»
				
	}
}

«ENDFILE»


«ENDDEFINE»

«DEFINE genBeanLookup FOR Class»
	«NameS»TestDataFactory «NameS.toFirstLower()»TestDataFactory  = («NameS»TestDataFactory) BeanHelper.getBean("«NameS.toFirstLower()»TestDataFactory") ;
«ENDDEFINE»



«DEFINE GenerateTestDataFactory FOR Entity»
	«FILE "../../test/java/" + packagePath()+ "/" + NameS + "TestDataFactory.java"»  

	package «packageName()»;
	
	
	import java.text.SimpleDateFormat;
	import java.util.List;
	import java.util.Random;
	import java.util.ArrayList;
	import org.witchcraft.model.support.springbeanhelpers.BeanHelper;
	import org.witchcraft.model.support.AbstractTestDataFactory;
	
	
	import org.springframework.transaction.annotation.Transactional;
	
	import  «packageName()».service.«NameS»Service;
	
	@Transactional
	public class «NameS»TestDataFactory extends AbstractTestDataFactory {
	
		List<«NameS»>  «asInstanceVar()»s = new ArrayList<«NameS»>();
	
		private static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss z");
		
		«NameS»Service «asInstanceVar()»Service;
	
		public «NameS»Service get«NameS»Service() {
			return «asInstanceVar()»Service;
		}
	
		public void set«NameS»Service(«NameS»Service «asInstanceVar()»Service) {
			this.«asInstanceVar()»Service = «asInstanceVar()»Service;
		}
		
		public void register(«NameS» «asInstanceVar()»){
			«asInstanceVar()»s.add(«asInstanceVar()»);
		}
		
	«FOREACH getCounters() AS counter-»

		public  «NameS» create«NameS»«counter»(){
			«NameS» «asInstanceVar()» = new «NameS»();
			
			try{
			
			«FOREACH getAllAttributes AS attrib-»
				«asInstanceVar()».«attrib.getContainerGetter()»set«attrib.NameS.toFirstUpper()»(«attrib.getRandValue()»);
			«ENDFOREACH»
			
			«REM»The associated entites for e.g an order would need a customer «ENDREM»
			«FOREACH AssociationEnd.Opposite.select(ae|!ae.isMultiple && ae.isNavigable && ae.Opposite.isMultiple) AS ae-»
				«EXPAND genBeanLookup FOR ae.Class»
				«asInstanceVar()».set«ae.NameS.toFirstUpper()»(«ae.Class.NameS.toFirstLower()»TestDataFactory.load«ae.Class.NameS-»());
			«ENDFOREACH»
			
			«REM»Composed collections e.g an order contains orderitems «ENDREM»
			«FOREACH AssociationEnd.Opposite.select(ae|ae.isMultiple && ae.isNavigable && ae.Opposite.isComposition) AS ae-»
				«EXPAND genBeanLookup FOR ae.Class»
				«ae.Class.NameS.toFirstLower()»TestDataFactory.setPersistable(false);
				«asInstanceVar()».get«ae.NameS.toFirstUpper()»().addAll(«ae.Class.NameS.toFirstLower()»TestDataFactory.getFew());
			«ENDFOREACH»
			
			register(«asInstanceVar()» );
			
			}catch(Exception ex){
				ex.printStackTrace();
			}
			
			return «asInstanceVar()»;
		}
	
	«ENDFOREACH»
       
       public  «NameS» load«NameS»() {
			List<«NameS»> «asInstanceVar()»s = «asInstanceVar()»Service.loadAll();
			
			if(«asInstanceVar()»s.isEmpty()){
				persistAll();
				«asInstanceVar()»s = «asInstanceVar()»Service.loadAll();
			}
			
			return «asInstanceVar()»s.get(new Random().nextInt(«asInstanceVar()»s.size()));
		}
		
		List<«NameS»> getAllAsList(){
			
			if(«asInstanceVar()»s.isEmpty()){
				«FOREACH getCounters() AS counter-»
					create«NameS»«counter»();
				«ENDFOREACH»
			}
		
			return «asInstanceVar()»s;
		}
		
		public  void persistAll(){
			if(!isPersistable())
				return;
				
			getAllAsList();
				
			for («NameS» «asInstanceVar()» : «asInstanceVar()»s) {
				«asInstanceVar()»Service.save(«asInstanceVar()»);
			}
		}
		
		/** Will return a random number of PlacedOrders
		 * @return
		 */
		List<«NameS»> getFew(){
			List<«NameS»> all = getAllAsList();
			int numToChoose = new Random(1212343).nextInt(all.size() - 1) + 1;
			
			List allClone = new ArrayList<«NameS»>();
			List returnList = new ArrayList<«NameS»>();
			
			allClone.addAll(all);
			
			while(returnList.size() < numToChoose){
				int indexToAdd = new Random(1212343).nextInt(allClone.size());
				returnList.add(allClone.get(indexToAdd));
				allClone.remove(indexToAdd);
			}
			
			return returnList;
		}
	
    }
	
	«ENDFILE»
«ENDDEFINE»


«DEFINE GenImports FOR Entity»
	import «packageName()».«NameS»TestDataFactory;
«ENDDEFINE»




