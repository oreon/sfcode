«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»

«EXTENSION java::NamingConventions»
«EXTENSION view::ViewExtensions»


@org.hibernate.annotations.Proxy(lazy = false)
«DEFINE GenerateBackingBean FOR Entity»
	
	«EXPAND ManualFileGen::genManualFile("/web/jsf", "BackingBean", "")»
	
	«FILE parentPackagePath()+"/web/jsf/"+NameS+"BackingBeanBase.java"»  
	package «parentPackageName()».web.jsf;
	
	import javax.faces.event.ActionEvent;
	import javax.faces.context.FacesContext;
	
	import org.witchcraft.model.jsf.BaseBackingBean;
	import org.witchcraft.model.support.service.BaseService;

	import «packageName()». «asParameter()»;
	import «parentPackageName()».service.«NameS»Service;
	
	import java.util.Date;
	import java.util.List;
	import org.witchcraft.model.support.Range;
	
	«IF getTreeFields != null»
		import java.util.Collection;
		import org.richfaces.component.UITree;
		import org.richfaces.event.NodeSelectedEvent;
		import org.richfaces.model.TreeNode;
		import org.richfaces.model.TreeNodeImpl;
		import org.richfaces.component.html.HtmlMenuItem;
	«ENDIF»
	
	
	«EXPAND java::JavaBean::GenCodeWarning»
	public class «asParameter()»BackingBeanBase extends BaseBackingBean<«NameS»>{
	
			protected «asParameter()» «asInstanceVar()» = new «asParameter()»();
			
			protected	«asParameter()»Service «asInstanceVar()»Service;
			
			«IF getTreeFields != null»
			protected TreeNode root = null;
			«ENDIF»
			
			«EXPAND GenRepeatAttributes FOR this»
			
			«EXPAND GenRangeFields FOR this»
			
			public void set«NameS»Service(«asParameter()»Service «asInstanceVar()»Service){
				this.«asInstanceVar()»Service = «asInstanceVar()»Service;
			}
	
			public «asParameter()» get«asParameter()»() {
				return «asInstanceVar()»;
			}
			
			public void set(«asParameter()» «asInstanceVar()») {
				this.«asInstanceVar()» = «asInstanceVar()»;
			}
			
			@SuppressWarnings("unchecked")
			public BaseService<«NameS»> getBaseService(){
				return «asInstanceVar()»Service;
			}	
			
			public «NameS» getEntity(){
				return get«NameS»();
			}			
			
    		@Override
			protected List<Range> getRangeList() {
		
				List<Range> listRanges = super.getRangeList();
				
				«FOREACH getAllAttributes AS attribute-»
					«IF attribute.needsRangeForSearch()-»
						listRanges.add(range«attribute.NameS.toFirstUpper()»);	
					«ENDIF»
				«ENDFOREACH»
				
				listRanges.add(rangeCreationDate);
				return listRanges;
			}

    
		    /** This action Listener Method is called when a row is clicked in the dataTable
		     *  
		     * @param event contains the database id of the row being selected 
		     */
		    public void selectEntity(ActionEvent actionEvent){		    	
		    	FacesContext ctx = FacesContext.getCurrentInstance();
				String idStr = (String)ctx.getExternalContext().getRequestParameterMap().get("id");
				long id = Long.parseLong(idStr);
				«asInstanceVar()» = «asInstanceVar()»Service.load(id);
		    	if(actionEvent.getComponent().getId()=="deleteId"){
		    		getBaseService().delete(«asInstanceVar()»);	}
		    	/*
		    	UIParameter component = (UIParameter) actionEvent.getComponent().findComponent("editId");
		    	// parse the value of the UIParameter component    	 
		    	long id = Long.parseLong(component.getValue().toString());
		    	*/
		    }
		    
		 «IF getTreeFields != null»
		  
			public TreeNode getTree() {
				if(root == null){
					root = new TreeNodeImpl();
					Collection<«NameS»> «asInstanceVar()»s = 
					 	«asInstanceVar()»Service.findTopLevelElements();
					addChildren(«asInstanceVar()»s, root);
					return root;
				}
				return root;
			}
		
			private void addChildren(Collection<«NameS»> «asInstanceVar()»s, TreeNode currentNode) {
			
				for («NameS» currentEntity : «asInstanceVar()»s) {
					
					TreeNodeImpl nodeImpl = new TreeNodeImpl();

					nodeImpl.setData(currentEntity.getDisplayName());
					currentNode.addChild(currentEntity, nodeImpl);
		
					Collection<Category> childEntites = currentEntity.get«getTreeFieldsAsCollection.get(1).toFirstUpper()»();
					addChildren(childEntites, nodeImpl);
				}
			}
			
			public void processSelection(NodeSelectedEvent event) {
		        UITree tree = (UITree) event.getComponent();
		        //nodeTitle = (String) tree.getRowData();
		    }
		«ENDIF»

	} 
	«ENDFILE»
	
«ENDDEFINE»

«REM» The repeat attributes like password need to have a variable in the backing bean«ENDREM»
«DEFINE GenRepeatAttributes FOR Entity»

«FOREACH getAllAttributes AS attribute»
	«IF attribute.getRepeat()»
		private String repeat«attribute.NameS.toFirstUpper()»; 
		
		public String getRepeat«attribute.NameS.toFirstUpper()»(){
			return repeat«attribute.NameS.toFirstUpper()»;
		}
		
		public void setRepeat«attribute.NameS.toFirstUpper()»(String repeat«attribute.NameS»){
			this.repeat«attribute.NameS.toFirstUpper()» = repeat«attribute.NameS»;
		}
	«ENDIF»
«ENDFOREACH»

«ENDDEFINE»

«REM»All searchable fields that are not strings and booleans should have range fields for min and max«ENDREM»
«DEFINE GenRangeFields FOR Entity»

private Range<Date> rangeCreationDate = new Range<Date>("dateCreated"); 
«EXPAND java::CommonUtils::genGetterSetter("Range<Date>", "rangeCreationDate") FOR ""»

«FOREACH getAllAttributes AS a»
	«IF a.needsRangeForSearch()»
		private Range<«a.Type.NameS»> range«a.NameS.toFirstUpper()» = new Range<«a.Type.NameS»>("«a.NameS»"); 
		«EXPAND java::CommonUtils::genGetterSetter("Range<" + a.Type.NameS + ">", "range" + a.NameS.toFirstUpper()) FOR a.NameS»
	«ENDIF»
«ENDFOREACH»

«ENDDEFINE»



