«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»
«EXTENSION java::NamingConventions»


«DEFINE GenerateDao FOR Entity»
	
	«EXPAND GenerateDaoInterface»
	
	«FILE packagePath()+"/dao/impl/"+NameS+"DaoImpl.java"»  

	package «packageName()».dao.impl;
	
	import «packageName()».«NameS»;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import java.util.List;
	import «packageName()».dao.«NameS»Dao;
	
	import org.hibernate.Criteria;
	import org.hibernate.Session;
	import org.hibernate.criterion.Example;
	
	
	import org.hibernate.SessionFactory;
	import org.hibernate.Transaction;
	import org.springframework.orm.hibernate3.HibernateTemplate;
	import org.hibernate.criterion.MatchMode;
	
	public class «NameS»DaoImpl extends JpaDaoSupport implements «NameS»Dao {
	
			private HibernateTemplate hibernateTemplate;

			public void setSessionFactory(SessionFactory sessionFactory) {
				this.hibernateTemplate = new HibernateTemplate(sessionFactory);
			}
	
			/**
			* This method saves or updates the given entity based upon whether the id is null
			*/
			public «NameS» save(«NameS» «asInstanceVar()») {
				if(«asInstanceVar()».getId() == null )
					getJpaTemplate().persist(«asInstanceVar()»);
				else 
					getJpaTemplate().merge(«asInstanceVar()»);
					
				return «asInstanceVar()»;
			}
			
			public void delete(«NameS» «asInstanceVar()») {
				getJpaTemplate().remove(«asInstanceVar()»);
			}			
			
			public «NameS» load(Long id) {
				return getJpaTemplate().find(«NameS».class, id);
			}
			
		    /* 
			 * loads all records for this entity 
			 */
		    public List<«NameS»> loadAll() {
		    	return getJpaTemplate().find("select «asInstanceVar()» from «NameS» «asInstanceVar()»");
		    }
			
			//// FINDERS ///// 
			
			«FOREACH Findable AS e»
				public List<«NameS»> findBy«e.NameS»(Object «e.NameS») { 
					return getJpaTemplate().find("select c from «NameS» c where c.«e.NameS» = ?1",  «e.NameS»);
				}
			«ENDFOREACH»
			
			public List<«NameS»> searchByExample(final «NameS» «asInstanceVar()») {
				
				return getJpaTemplate().executeFind(new JpaCallback() {

					public Object doInJpa(EntityManager em) throws PersistenceException {
						Session session = (Session) em.getDelegate();
		
						Criteria criteria = session.createCriteria(Customer.class).add(
								Example.create(«asInstanceVar()»).enableLike(MatchMode.START)
										.ignoreCase().excludeZeroes().excludeProperty(
												"dateModified").excludeProperty("id")
										.excludeProperty("dateCreated"));
						return criteria.list();
					}
				});
				
		    }
			
			
		} 
	«ENDFILE»	
	
«ENDDEFINE»


«DEFINE GenerateDaoInterface FOR Entity»
	«FILE packagePath()+"/dao/"+NameS+"Dao.java"» 
	
	package «packageName()».dao;
	
	import «packageName()». «NameS»;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import java.util.List;
	
	public interface «NameS»Dao  {
	
			public «NameS» save(«NameS» «asInstanceVar()»);
		
			public void delete(«NameS» «asInstanceVar()»);			
			
			public «NameS» load(Long id);
			
		    public List<«NameS»> loadAll();
		    
		    «FOREACH Findable AS e»
				public List<«NameS»> findBy«e.NameS»(Object «e.NameS»);
			«ENDFOREACH»
			
			public List<«NameS»> searchByExample(«NameS» «asInstanceVar()»);
	}		
	
	«ENDFILE»	
«ENDDEFINE»


«DEFINE GenerateConfig FOR Model»
	«FILE "../resources/hibernate.cfg.xml"»
		<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
       	«EXPAND GenerateEntityMapping FOREACH getEntities()»
    </session-factory>
</hibernate-configuration>
	
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateEntityMapping FOR Entity»
	<mapping class="«fqn()»" />
«ENDDEFINE»



«DEFINE GenerateDaoTest FOR Entity»
	
	«FILE "../../test/java/" + packagePath() + "/service/" + NameS + "DaoTest.java"»  

	package «packageName()».service;
	
	import «packageName()».«NameS»;
	import org.springframework.test.jpa.AbstractJpaTests;
	import java.util.List;
	
	
	public class «NameS»DaoTest extends AbstractJpaTests {
			
			private «NameS»Service «asInstanceVar()»Service;
	
		    public void set«NameS»Service(«NameS»Service «asInstanceVar()»Service) {
				this.«asInstanceVar()»Service = «asInstanceVar()»Service;
			}
		    
		    @Override
			protected String[] getConfigLocations() {
				return new String[]{"classpath:/applicationContext.xml"};
			}
			
			/**
			* Do the setup before the test in this method
			**/
			protected void onSetUpInTransaction() throws Exception {
			
			}
			
		
			public void testSave() {
				//test saving a new record and updating an existing record;
			}
			
			public void testDelete() {
				//return false;
			}			
			
			public void testLoad() {
				//return null;
			}
			
			«EXPAND GenerateFinderTest FOREACH Findable» 
			
			public void testSearchByExample(){
				
		    	«NameS» «asInstanceVar()» = new «NameS»();
		    	//«asInstanceVar()».setFirstName("Eri");
		    	List<«NameS»> «asInstanceVar()»s = «asInstanceVar()»Service.searchByExample(«asInstanceVar()»);
		    	assertTrue(!«asInstanceVar()»s.isEmpty()); 
		    }
			
		} 
	«ENDFILE»
	
	
«ENDDEFINE»

«DEFINE GenerateFinderTest FOR Findable»
	public void testFindBy«NameS»() { }
«ENDDEFINE»




