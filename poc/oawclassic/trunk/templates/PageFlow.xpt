«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT org::openarchitectureware::meta::uml::state»

«EXTENSION view::ViewExtensions»
«EXTENSION templates::GeneratorUtil»
«EXTENSION java::NamingConventions»



«DEFINE file FOR StateMachine»
	
	«FILE "../webapp/WEB-INF/faces-config-generated.xml"»
	   «EXPAND GeneratePageFlow»
	«ENDFILE»
	
	«EXPAND GenXHTML»

«ENDDEFINE»


«DEFINE GeneratePageFlow FOR StateMachine»
<?xml version="1.0"?>
<!DOCTYPE faces-config PUBLIC "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.0//EN" "http://java.sun.com/dtd/web-facesconfig_1_1.dtd">
<faces-config>
	«EXPAND GenFacesNav FOREACH getStates()»
</faces-config>
«ENDDEFINE»

«DEFINE GenFacesNav FOR State»
	<navigation-rule>
	  	<from-view-id>/«StateMachine.NameS»/«NameS».xhtml</from-view-id>
		«FOREACH OutTransition AS transition»
		  <navigation-case>
		    <from-outcome> «transition.Trigger.NameS»</from-outcome>
		    <to-view-id>/«StateMachine.NameS»/«transition.TargetVertex.NameS».xhtml</to-view-id>
		  </navigation-case>   
		«ENDFOREACH» 
	</navigation-rule>
«ENDDEFINE»


«DEFINE GenXHTML FOR StateMachine»
	 «EXPAND GenXHTML FOREACH getStates()»
	 «EXPAND GenBeanClass FOREACH getStates()»
«ENDDEFINE»

«REM» This function generates xhtml for the given state «ENDREM»
«DEFINE GenXHTML FOR State»
	«FILE "../webapp/" +  StateMachine.NameS + "/" +NameS +".xhtml"»
	«EXPAND view::ViewGen::genIncludes("default.xhtml")-»
	
	<ui:define name="content">
		<f:view>
		«FOREACH OutTransition AS transition»
			<h:form>
				<h:panelGrid>
			«IF transition.Trigger != null && transition.Trigger.hasParameter»
				
					<h:inputText value="«transition.Trigger.Parameter»" />
					<h:commandButton id="button1" value="Submit" 
						action="#{«StateMachine.NameS»SMBacking.«transition.Guard»}"/>  
				
			«ELSE»	
				<h:commandLink value="«transition.Trigger.NameS»"
					action="«transition.Trigger.NameS»" /> 
			«ENDIF»
				</h:panelGrid>
			</h:form>
		«ENDFOREACH» 
		</f:view>
	 </ui:define>	
	</ui:composition>
	«ENDFILE»
«ENDDEFINE»

«REM» If any transition in a state has a guard we need to generate a backing bean for it «ENDREM»
«DEFINE GenBeanClass FOR State»
	«FOREACH OutTransition AS transition»
			«IF transition.Trigger != null && transition.Guard != null»
				«EXPAND BeanClass FOR this»
			«ENDIF»
	«ENDFOREACH» 
«ENDDEFINE»
	


«DEFINE BeanClass FOR State»
	«FILE "states/web/jsf" +"/"+ NameS.toFirstUpper() +"BeanBase.java"»  
	
		«EXPAND java::ManualFileGen::genManualFile("states/web/jsf", "Bean", "")»
		
		package states.web.jsf;
		
		import java.util.Date;
		
		import org.apache.log4j.Logger;
		
		public abstract class «NameS.toFirstUpper()»BeanBase{
			
		«FOREACH OutTransition AS transition»
			«IF transition.Trigger != null && transition.Guard != null»
			
				private static final Logger log = 
					Logger.getLogger(«NameS.toFirstUpper()»BeanBase.class);
			
				public String  «transition.Guard»{
					try{
						return do«transition.Guard.toFirstUpper()»;
					}catch(Throwable t ){
						log.error(t);
						return "failure";
					}
				}
				
				public abstract String do«transition.Guard.toFirstUpper()»;
					
			«ENDIF»
		«ENDFOREACH» 
	
		} 
	«ENDFILE»
«ENDDEFINE»



