
##Generates attributes for the given class and all its components
#macro(generateAttributesForClass $cls $clsName)
	         		#generateAttributes($cls $clsName)
		  	       
		  	        ## get all the embeddable components 
		  	       #set($componentMap = ${manager.getComponents($cls).get("components")} )
  	       
		  	       #foreach( $component in ${componentMap.keySet()} )
		  	        #set($compClass = ${componentMap.get($component)})
		  	        #set($compName = "$clsName.${component}")			
		  	        #generateAttributes(  $compClass $compName )
		  	       			#end
		  	       			
		  	       			 			## get all the associations 
		  	       			 #set($associationsMap = ${manager.getComponents($cls).get("associations")} )
		  	       			 #foreach( $assocName in ${associationsMap.keySet()} )			
		  	         #assocInputHtm($assocName $clsName)
		  	       			 #end
#end

#macro( generateAttributes $cls $clsName )
	  			#foreach( $attribute in $cls.Attribute())			
		  	  #attributeInputHtm($attribute $clsName )     			  
		  				#end
#end 

## e.g values attribute - city clsName - customer.primaryAddress component-primaryAddress 
#macro( attributeInputHtm $attribute $clsName )
		    <h:outputText value="${utils.getViewLabel($attribute)}" styleClass="formLabel" /> 
    <${manager.getInputComponentType($attribute)} id="${clsName.replace('.', '_')}_${attribute.NameS()}" value="#{${utils.asVariable($clazz.NameS() )}CrudBacking.$clsName.${attribute.NameS()}}" ${utils.getRequired($attribute)} >
    			  ${manager.getInputComponentContent($attribute)}
    </${manager.getInputComponentType($attribute)}> 
    <h:message for="${clsName.replace('.', '_')}_${attribute.NameS()}" />
#end 

## e.g values attribute - city clsName - customer.primaryAddress component-primaryAddress 
#macro( assocInputHtm $assocName $clsName )
		    <h:outputText value="${utils.getViewLabel($assocName)}" styleClass="formLabel" /> 
    <h:inputText id="${clsName.replace('.', '_')}_$assocName" value="#{${utils.asVariable($clazz.NameS() )}CrudBacking.$clsName.${assocName}.id}" ${utils.getRequired($attribute)} /> 
    <h:message for="${clsName.replace('.', '_')}_$assocName" />
#end 



<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:c="http://java.sun.com/jstl/core"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:t="http://myfaces.apache.org/tomahawk"
	template="/WEB-INF/template/templateCrud.xhtml">

	<ui:define name="content">
    <f:view>
            <h:form id="form">
				  				               <h:panelGrid columns="3" >
				  				               
				  				   ##set the current class name e.g. customer 
				  #set($clsName = ${utils.asVariable($clazz.NameS() )} )             
				  				               
				  				               ## We need to have a hidden text field to store the id of the record being edited		
				  				               			<h:inputHidden id="${clsName}_id" value="#{${clsName}CrudBacking.${clsName}.id}" />
	 
				 
				  
				  #foreach( $superclass in ${manager.getSuperClasses($clazz)} )			
 		  	#generateAttributesForClass($superclass $clsName)       			
  				#end			
		  			
		  	#generateAttributesForClass($clazz $clsName)      
		  
		  							   <h:commandButton id="button1" value="Submit" action="#{${clsName}CrudBacking.update}"/> 
		  		
				                  </h:panelGrid>
             </h:form>
        </f:view>
    
    </ui:define>
</ui:composition>
						
		