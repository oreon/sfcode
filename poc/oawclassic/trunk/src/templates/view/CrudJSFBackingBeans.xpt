«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»

«EXTENSION java::NamingConventions»
«EXTENSION view::ViewExtensions»
@org.hibernate.annotations.Proxy(lazy = false)
«DEFINE GenerateBackingBean FOR Entity»
	
	«FILE parentPackagePath()+"/web/jsf/"+NameS+"BackingBean.java"»  

	package «parentPackageName()».web.jsf;
	
	import javax.faces.component.UIParameter;
	import javax.faces.event.ActionEvent;
	import javax.faces.context.FacesContext;
	import javax.faces.component.UIOutput;
	
	import org.witchcraft.model.jsf.BaseBackingBean;
	import org.witchcraft.model.support.service.BaseService;

	import «packageName()». «asParameter()»;
	import «parentPackageName()».service.«NameS»Service;
	
	«IF getTreeFields != null»
		import java.util.Collection;
		import org.richfaces.component.UITree;
		import org.richfaces.event.NodeSelectedEvent;
		import org.richfaces.model.TreeNode;
		import org.richfaces.model.TreeNodeImpl;
		import org.richfaces.component.html.HtmlMenuItem;
	«ENDIF»
	
	
	public class «asParameter()»BackingBean extends BaseBackingBean<«NameS»>{
	
			private «asParameter()» «asInstanceVar()» = new «asParameter()»();
			
			private	«asParameter()»Service «asInstanceVar()»Service;
			
			«IF getTreeFields != null»
			private TreeNode root = null;
			«ENDIF»
			
			«EXPAND GenRepeatAttributes FOR this»
			
			public void set«NameS»Service(«asParameter()»Service «asInstanceVar()»Service){
				this.«asInstanceVar()»Service = «asInstanceVar()»Service;
			}
	
			public «asParameter()» get«asParameter()»() {
				return «asInstanceVar()»;
			}
			
			public void set(«asParameter()» «asInstanceVar()») {
				this.«asInstanceVar()» = «asInstanceVar()»;
			}
			
			@SuppressWarnings("unchecked")
			public BaseService<«NameS»> getBaseService(){
				return «asInstanceVar()»Service;
			}	
			
			public «NameS» getEntity(){
				return get«NameS»();
			}			
			
			
			
			public String search(){
				action=SEARCH;
				return "search";
			}
			//functions for advanced search
			
			public String dateOp="On";
			
			public String dateOp(){
				System.out.println("getting date op from method: "+dateOp);
				return dateOp;
			}
			
			public void doAdvancedSearch(){
				switch(dateOP){
				case "On":;break;
				case "Any":;break;
				case "After":;break;
				case "Before":;break;
				case "Between":;break;
				default:;break;
				}
				
			}
			public String getDateOp(){
				if(dateOp==null){dateOp="Any";}
				
				System.out.println("getting date op: "+dateOp);
				return dateOp;
			}
			
			public void setDateOp(UIParameter uip){	
			 	//dateOp=(value)uip.getId();
			 	System.out.println("setting date op from param: "+dateOp);
			 }	
			
			 public void setDateOp(ActionEvent actionEvent){	
			 	dateOp=actionEvent.getComponent().getId();
			 	System.out.println("setting date op from event: "+dateOp);
			 }	
			
			
			public void setDateOp(String s){		
				FacesContext ctx = FacesContext.getCurrentInstance();
				this.dateOp = (String)ctx.getExternalContext().getRequestParameterMap().get("id");				
				System.out.println("setting date op from string: "+dateOp);
			}
	
			/** Returns a success string upon selection of an entity in model - majority of work is done
			 * in the actionListener selectEntity
            * @return - "success" if everthing goes fine
            * @see - 
            */
			 public String select(){
    			return "edit";
    		}

    
		    /** This action Listener Method is called when a row is clicked in the dataTable
		     *  
		     * @param event contains the database id of the row being selected 
		     */
		    public void selectEntity(ActionEvent actionEvent){		    	
		    	FacesContext ctx = FacesContext.getCurrentInstance();
				String idStr = (String)ctx.getExternalContext().getRequestParameterMap().get("id");
				long id = Long.parseLong(idStr);
				«asInstanceVar()» = «asInstanceVar()»Service.load(id);
		    	if(actionEvent.getComponent().getId()=="deleteId"){
		    		getBaseService().delete(«asInstanceVar()»);	}
		    	/*
		    	UIParameter component = (UIParameter) actionEvent.getComponent().findComponent("editId");
		    	// parse the value of the UIParameter component    	 
		    	long id = Long.parseLong(component.getValue().toString());
		    	*/
		    }
		    
		 «IF getTreeFields != null»
		  
			public TreeNode getTree() {
				if(root == null){
					root = new TreeNodeImpl();
					Collection<«NameS»> «asInstanceVar()»s = 
					 	«asInstanceVar()»Service.findTopLevelElements();
					addChildren(«asInstanceVar()»s, root);
					return root;
				}
				return root;
			}
		
			private void addChildren(Collection<«NameS»> «asInstanceVar()»s, TreeNode currentNode) {
			
				for («NameS» currentEntity : «asInstanceVar()»s) {
					
					TreeNodeImpl nodeImpl = new TreeNodeImpl();

					nodeImpl.setData(currentEntity.getDisplayName());
					currentNode.addChild(currentEntity, nodeImpl);
		
					Collection<Category> childEntites = currentEntity.get«getTreeFieldsAsCollection.get(1).toFirstUpper()»();
					addChildren(childEntites, nodeImpl);
				}
			}
			
			public void processSelection(NodeSelectedEvent event) {
		        UITree tree = (UITree) event.getComponent();
		        //nodeTitle = (String) tree.getRowData();
		    }
		«ENDIF»

	} 
	«ENDFILE»
	
«ENDDEFINE»

«REM» The repeat attributes like password need to have a variable in the backing bean«ENDREM»
«DEFINE GenRepeatAttributes FOR Entity»

«FOREACH getAllAttributes AS attribute»
	«IF attribute.getRepeat()»
		private String repeat«attribute.NameS.toFirstUpper()»; 
		
		public String getRepeat«attribute.NameS.toFirstUpper()»(){
			return repeat«attribute.NameS.toFirstUpper()»;
		}
		
		public void setRepeat«attribute.NameS.toFirstUpper()»(String repeat«attribute.NameS»){
			this.repeat«attribute.NameS.toFirstUpper()» = repeat«attribute.NameS»;
		}
	«ENDIF»
«ENDFOREACH»

«ENDDEFINE»


«DEFINE GenerateManagedBeanDefs FOR Model »
	
«FILE "../webapp/WEB-INF/genCrud-config.xml" » 		
<?xml version="1.0"?>
<!DOCTYPE faces-config PUBLIC
  "-//Sun Microsystems, Inc.//DTD JavaServer Faces Config 1.0//EN"
  "http://java.sun.com/dtd/web-facesconfig_1_1.dtd" >

<faces-config>

	<!--  Spring variable resolver -->
	<application>
		<variable-resolver>
			org.springframework.web.jsf.DelegatingVariableResolver
		</variable-resolver>
	</application>

	<!-- Managed beans for the crud operations -->

	
	
	«EXPAND GenerateManagedBeanDef FOREACH getEntities()»
	
	<!-- Navigation Rules  -->
	«EXPAND GenerateNavRules FOREACH getEntities()»
	<navigation-rule>
  		<from-view-id>/crud/entitiesSummary.xhtml</from-view-id>
	</navigation-rule>
			
</faces-config>
	
«ENDFILE»
	
«ENDDEFINE»


«DEFINE GenerateManagedBeanDef FOR Entity»

	<managed-bean>
		<managed-bean-name>«asInstanceVar()»CrudBacking</managed-bean-name>
		<managed-bean-class>«parentPackageName()».web.jsf.«NameS»BackingBean</managed-bean-class>
		<managed-bean-scope>request</managed-bean-scope>
		<managed-property>
			<property-name>«asInstanceVar()»Service</property-name>
			<value>#{«asInstanceVar()»Service}</value>
		</managed-property>
		
		

		
		
	</managed-bean> 
 	
«ENDDEFINE»
	
	
«DEFINE GenerateNavRules FOR Entity»
	<navigation-rule>
  		<from-view-id>/crud/«Package.NameS»/«asInstanceVar()».xhtml</from-view-id>
  
		  <navigation-case>
		    <from-outcome>success</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case>   
    
	</navigation-rule>
	
	<navigation-rule>
  		<from-view-id>/crud/«Package.NameS»/«asInstanceVar()»Search.xhtml</from-view-id>
  
		  <navigation-case>
		    <from-outcome>search</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case>   
		  
		  
    
	</navigation-rule>
	
	<navigation-rule>
  		<from-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</from-view-id>
  
		  <navigation-case>
		    <from-outcome>edit</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()».xhtml</to-view-id>
		  </navigation-case>   
		  
		   <navigation-case>
		    <from-outcome>addNew</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()».xhtml</to-view-id>
		  </navigation-case> 
		  
		  <navigation-case>
		    <from-outcome>delete</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case> 
		  
		  <navigation-case>
		    <from-outcome>success</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case> 
		  
		  <navigation-case>
		    <from-outcome>failure</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case> 
		  
		  <navigation-case>
		    <from-outcome>search</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»Search.xhtml</to-view-id>
		  </navigation-case>   
    
	</navigation-rule>
	
	<navigation-rule>
  		<from-view-id>/crud/«Package.NameS»/«asInstanceVar()»Search.xhtml</from-view-id>
  
		  <navigation-case>
		    <from-outcome>search</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case>   
		  
		   <navigation-case>
		    <from-outcome>cancel</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case>   
    
	</navigation-rule>
	
	<navigation-rule>
  		<from-view-id>/crud/*</from-view-id>
  
		  <navigation-case>
		    <from-outcome>list«NameS»</from-outcome>
		    <to-view-id>/crud/«Package.NameS»/«asInstanceVar()»List.xhtml</to-view-id>
		  </navigation-case>   
		  
	</navigation-rule>	  
		  
	
«ENDDEFINE»		 



