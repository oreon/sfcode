«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»

«EXTENSION java::NamingConventions»
«EXTENSION java::Associations»


«DEFINE GenerateDao FOR Entity»
	
	«EXPAND GenerateDaoInterface»
	
	«FILE packagePath()+"/dao/impl/"+NameS+"DaoImpl.java"»  

	package «packageName()».dao.impl;
	
	import «packageName()».«NameS»;
	import «packageName()».dao.«NameS»Dao;
	
	import java.util.List;

	import javax.persistence.EntityManager;
	import javax.persistence.PersistenceException;
	
	import org.hibernate.Criteria;
	import org.hibernate.Session;
	import org.hibernate.SessionFactory;
	import org.hibernate.criterion.Example;
	import org.hibernate.criterion.MatchMode;
	import org.springframework.orm.hibernate3.HibernateTemplate;
	import org.springframework.orm.jpa.JpaCallback;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import org.springframework.stereotype.Repository;
	
	@Repository
	public class «NameS»DaoImpl extends JpaDaoSupport implements «NameS»Dao {
	
			private HibernateTemplate hibernateTemplate;

			public void setSessionFactory(SessionFactory sessionFactory) {
				this.hibernateTemplate = new HibernateTemplate(sessionFactory);
			}
	
			/**
			* This method saves or updates the given entity based upon whether the id is null
			*/
			public «NameS» save(«NameS» «asInstanceVar()») {
				if(«asInstanceVar()».getId() == null )
					getJpaTemplate().persist(«asInstanceVar()»);
				else 
					getJpaTemplate().merge(«asInstanceVar()»);
					
				return «asInstanceVar()»;
			}
			
			public void delete(«NameS» «asInstanceVar()») {
				getJpaTemplate().remove(«asInstanceVar()»);
			}			
			
			public «NameS» load(Long id) {
				return getJpaTemplate().find(«NameS».class, id);
			}
			
		    /**
			 * Loads all records for this entity 
			 */
			 @SuppressWarnings("unchecked")
		    public List<«NameS»> loadAll() {
		    	return getJpaTemplate().find("select «asInstanceVar()» from «NameS» «asInstanceVar()»");
		    }
			
			//// FINDERS ///// 
			
			«EXPAND FinderImpl(this) FOREACH Findable »
					
			@SuppressWarnings("unchecked")
			public List<«NameS»> searchByExample(final «NameS» «asInstanceVar()») {
				
				return getJpaTemplate().executeFind(new JpaCallback() {

					public Object doInJpa(EntityManager em) throws PersistenceException {
						Session session = (Session) em.getDelegate();
		
						Criteria criteria = session.createCriteria(«NameS».class).add(
								Example.create(«asInstanceVar()»).enableLike(MatchMode.START)
										.ignoreCase().excludeZeroes().excludeProperty(
												"dateModified").excludeProperty("id")
										.excludeProperty("dateCreated"));
						return criteria.list();
					}
				});
				
		    }
			
			
		} 
	«ENDFILE»	
	
«ENDDEFINE»


«DEFINE FinderImpl(AbstractEntity entity) FOR Column»
	@SuppressWarnings("unchecked")
	public
		«IF isUnique»
			«entity.NameS» findBy«NameS.toFirstUpper()»(«Type.NameS» «NameS») { 
				List<«entity.NameS»> list = getJpaTemplate().find("select c from «entity.NameS» c where c.«getContainerName != null ? getContainerName + ".":""»«NameS» = ?1",  «NameS»);
				return list.isEmpty()?null:list.get(0);
			}		
		«ELSE»
			
			List<«entity.NameS»> findBy«NameS.toFirstUpper()»(«Type.NameS» «NameS») { 
				List<«entity.NameS»> list = getJpaTemplate().find("select c from «entity.NameS» c where c.«getContainerName != null ? getContainerName + ".":""»«NameS» = ?1",  «NameS»);
				return list;
			}		
		«ENDIF»
«ENDDEFINE»

«DEFINE FinderDeclaration(AbstractEntity entity) FOR Column»
	public
		«IF isUnique»
			«entity.NameS» findBy«NameS.toFirstUpper()»(«Type.NameS» «NameS»);
		«ELSE»
			List<«entity.NameS»> findBy«NameS.toFirstUpper()»(«Type.NameS» «NameS»);
		«ENDIF»
«ENDDEFINE»


«DEFINE GenerateDaoInterface FOR Entity»
	«FILE packagePath()+"/dao/"+NameS+"Dao.java"» 
	
	package «packageName()».dao;
	
	import «packageName()». «NameS»;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import java.util.List;
	
	public interface «NameS»Dao  {
	
			public «NameS» save(«NameS» «asInstanceVar()»);
		
			public void delete(«NameS» «asInstanceVar()»);			
			
			public «NameS» load(Long id);
			
		    public List<«NameS»> loadAll();
		    
		    «EXPAND FinderDeclaration(this) FOREACH Findable »
			
			public List<«NameS»> searchByExample(«NameS» «asInstanceVar()»);
	}		
	
	«ENDFILE»	
«ENDDEFINE»


«DEFINE GenerateConfig FOR Model»
	«FILE "../resources/hibernate.cfg.xml"»
		<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
    	       <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <property name="connection.url">jdbc:mysql:///ecomm</property>
        <property name="connection.username">root</property>
        <property name="connection.password">root</property>

        <!-- JDBC connection pool (use the built-in) -->
        <property name="connection.pool_size">1</property>

        <!-- SQL dialect -->
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>

        <!-- Enable Hibernate's automatic session context management -->
        <property name="current_session_context_class">thread</property>

        <!-- Disable the second-level cache  -->
        <property name="cache.provider_class">org.hibernate.cache.NoCacheProvider</property>

        <!-- Echo all executed SQL to stdout -->
        <property name="show_sql">true</property>

        <!-- Drop and re-create the database schema on startup -->
        <property name="hbm2ddl.auto">update</property>
    
       	«EXPAND GenerateEntityMapping FOREACH getEntities()-»
       	
       	<mapping class="org.witchcraft.model.support.User" />
		<mapping class="org.witchcraft.model.support.Authority" />
    </session-factory>
</hibernate-configuration>
	
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateEntityMapping FOR Entity-»
	<mapping class="«fqn()»" />
«ENDDEFINE»



«DEFINE GenerateDaoTest FOR Entity»
	
	«FILE "../../test/java/" + packagePath() + "/service/" + NameS + "DaoTest.java"»  

	package «packageName()».service;
	
	import «packageName()».«NameS»;
	import org.springframework.test.jpa.AbstractJpaTests;
	import java.util.List;
	
	
	public class «NameS»DaoTest extends AbstractJpaTests {
			
			private «NameS»Service «asInstanceVar()»Service;
	
		    public void set«NameS»Service(«NameS»Service «asInstanceVar()»Service) {
				this.«asInstanceVar()»Service = «asInstanceVar()»Service;
			}
		    
		    @Override
			protected String[] getConfigLocations() {
				return new String[]{"classpath:/applicationContext.xml"};
			}
			
			/**
			* Do the setup before the test in this method
			**/
			protected void onSetUpInTransaction() throws Exception {
			
			}
			
		
			public void testSave() {
				//test saving a new record and updating an existing record;
			}
			
			public void testDelete() {
				//return false;
			}			
			
			public void testLoad() {
				//return null;
			}
			
			«EXPAND FinderTest(this) FOREACH Findable »
			
			public void testSearchByExample(){
		    	«NameS» «asInstanceVar()» = new «NameS»();
		    	//«asInstanceVar()».setFirstName("Eri");
		    	List<«NameS»> «asInstanceVar()»s = «asInstanceVar()»Service.searchByExample(«asInstanceVar()»);
		    	assertTrue(!«asInstanceVar()»s.isEmpty()); 
		    }
			
		} 
	«ENDFILE»
	
	
«ENDDEFINE»


«DEFINE FinderTest(AbstractEntity e) FOR Column»
	public void testFindBy«NameS.toFirstUpper()»(){
		«IF isUnique»
			assertNotNull("Couldn't find a «e.NameS» with «NameS» XXX", «e.asInstanceVar()»Service.findBy«NameS.toFirstUpper()»("XXX"));
			assertNull("Found a «e.NameS» with «NameS» YYY", «e.asInstanceVar()»Service.findBy«NameS.toFirstUpper()»("YYY"));			
		«ELSE»
			List<«e.NameS»> «e.asInstanceVar()»s = «e.asInstanceVar()»Service.findBy«NameS.toFirstUpper()»("XXX");
		    assertTrue(!«e.asInstanceVar()»s.isEmpty()); 
		    
		    //negative test
		    «e.asInstanceVar()»s = «e.asInstanceVar()»Service.findBy«NameS.toFirstUpper()»("YYY");
		    assertTrue(«e.asInstanceVar()»s.isEmpty()); 
		«ENDIF»
	}
«ENDDEFINE»





