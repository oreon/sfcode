«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT org::openarchitectureware::util::stdlib::counter»

«IMPORT java»
«EXTENSION java::NamingConventions»


«DEFINE GenerateTestDataFactory FOR Entity»
	«FILE "../../test/java/" + "/testdata/" + NameS + "TestDataFactory.java"»  

	package testdata;
	
	«EXPAND GenImports FOREACH getEntities()»
	import org.springframework.test.jpa.AbstractJpaTests;
	import java.util.List;
	
	import java.text.SimpleDateFormat;
	
	
	public class «NameS»TestDataFactory {
	
		private static SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss z");
		
		«NameS»Service «asInstanceVar()»Service;
	
		public «NameS»Service get«NameS»Service() {
			return «asInstanceVar()»Service;
		}
	
		public void set«NameS»Service(«NameS»Service «asInstanceVar()»Service) {
			this.«asInstanceVar()»Service = «asInstanceVar()»Service;
		}
		
       	«FOREACH getCounters() AS counter-»

		public static «NameS» create«NameS»«counter»(){
		«NameS» «asInstanceVar()» = new «NameS»();
		
		try{
		
		«FOREACH getAllAttributes AS attrib-»
			«asInstanceVar()».«attrib.getContainerGetter()»set«attrib.NameS.toFirstUpper()»(«attrib.getRandValue()»);
		«ENDFOREACH»
		
		«REM»The associated entites for e.g an order would need a customer «ENDREM»
		«FOREACH AssociationEnd.Opposite.select(ae|!ae.isMultiple && ae.isNavigable) AS ae-»
			«asInstanceVar()».set«ae.NameS.toFirstUpper()»(load«ae.Class.NameS»());
		«ENDFOREACH»
		
		«REM»Composed collections  «ENDREM»
		«FOREACH AssociationEnd.Opposite.select(ae|ae.isMultiple && ae.isNavigable && ae.isComposition) AS ae-»
			«asInstanceVar()».set«ae.NameS.toFirstUpper()»(load«ae.Class.NameS»());
		«ENDFOREACH»
		
		
		}catch(Exception ex){
			ex.printStackTrace();
		}
		
		return «asInstanceVar()»;
	}
	
	«ENDFOREACH»
       
       public static «NameS» load«NameS»() {
			List<«NameS»> «asInstanceVar()»s = «asInstanceVar()»Service.loadAll();
			
			if(«asInstanceVar()»s.isEmpty()){
				persist«NameS»s();
				«asInstanceVar()»s = «asInstanceVar()»Service.loadAll();
			}
			
			return «asInstanceVar()»s.get(new Random().nextInt(«asInstanceVar()»s.size()));
		}
		
		public static void persistCustomers(){
			customerService.save(createCustomerOne());
			customerService.save(createCustomerTwo());
			customerService.save(createCustomerThree());
			customerService.save(createCustomerFour());
		}
	
    }
	
	«ENDFILE»
«ENDDEFINE»


«DEFINE GenImports FOR Entity»
	import «packageName()».«NameS»;
«ENDDEFINE»




