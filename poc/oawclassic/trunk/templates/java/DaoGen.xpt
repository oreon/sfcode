«IMPORT org::openarchitectureware::meta::uml::classifier»
«IMPORT oaw4::demo::classic::uml::meta»
«IMPORT org::openarchitectureware::core::meta::core»
«IMPORT java»
«EXTENSION java::NamingConventions»


«DEFINE GenerateDao FOR Entity»
	
	«EXPAND GenerateDaoInterface»
	
	«FILE packagePath()+"/dao/"+NameS+"DaoImpl.java"»  

	package «packageName()».dao;
	
	import «packageName()». «asParameter()»;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import java.util.List;
	
	public class «asParameter()»DaoImpl extends JpaDaoSupport implements «asParameter()»Dao {
	
			public «asParameter()» save(«asParameter()» «asInstanceVar()») {
				getJpaTemplate().persist(«asInstanceVar()»);
				return «asInstanceVar()»;
			}
			
			public void delete(«asParameter()» «asInstanceVar()») {
				getJpaTemplate().remove(«asInstanceVar()»);
			}			
			
			public «asParameter()» load(Long id) {
				return getJpaTemplate().find(«asParameter()».class, id);
			}
			
		    /* 
			 * loads all records for this entity 
			 */
		    public List<«asParameter()»> loadAll() {
		    	return getJpaTemplate().find("select «asInstanceVar()» from «asParameter()» «asInstanceVar()»");
		    }
			
			
			«EXPAND GenerateFinder FOREACH Findable» 
			
		} 
	«ENDFILE»	
	
«ENDDEFINE»

«DEFINE GenerateFinderDef FOR Findable»
	public List<«Class.NameS»> findBy«NameS»(String «NameS»);
«ENDDEFINE»

«DEFINE GenerateFinder FOR Findable»
	public List<«Class.NameS»> findBy«NameS»(String «NameS») { 
		return getJpaTemplate().find("select c from «Class.NameS» c where c.«NameS» = ?1",  «NameS»);
	}
«ENDDEFINE»

«DEFINE GenerateDaoInterface FOR Entity»
	«FILE packagePath()+"/dao/"+NameS+"Dao.java"» 
	
	package «packageName()».dao;
	
	import «packageName()». «asParameter()»;
	import org.springframework.orm.jpa.support.JpaDaoSupport;
	import java.util.List;
	
	public interface «asParameter()»Dao  {
	
			public «asParameter()» save(«asParameter()» «asInstanceVar()»);
		
			public void delete(«asParameter()» «asInstanceVar()»);			
			
			public «asParameter()» load(Long id);
			
		    public List<«asParameter()»> loadAll();
		    
		    «EXPAND GenerateFinderDef FOREACH Findable» 
	}		
	
	«ENDFILE»	
«ENDDEFINE»


«DEFINE GenerateConfig FOR Model»
	«FILE "../resources/hibernate.cfg.xml"»
		<!DOCTYPE hibernate-configuration PUBLIC "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
    "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
       	«EXPAND GenerateEntityMapping FOREACH getEntities()»
    </session-factory>
</hibernate-configuration>
	
	«ENDFILE»
«ENDDEFINE»

«DEFINE GenerateEntityMapping FOR Entity»
	<mapping class="«fqn()»" />
«ENDDEFINE»



«DEFINE GenerateDaoTest FOR Entity»
	
	«FILE "../../test/java/" + packagePath() + "/dao/" + NameS + "DaoTest.java"»  

	package «packageName()».dao;
	
	import «packageName()». «asParameter()»;
	import javax.persistence.*;
	
	public class «asParameter()»DaoTest{
	
			public void testSave() {
				//test saving a new record and updating an existing record;
			}
			
			public void testDelete() {
				//return false;
			}			
			
			public void testLoad() {
				//return null;
			}
			
			«EXPAND GenerateFinderTest FOREACH Findable» 
			
		} 
	«ENDFILE»
	
	
«ENDDEFINE»

«DEFINE GenerateFinderTest FOR Findable»
	public void testFindBy«NameS»() { }
«ENDDEFINE»




